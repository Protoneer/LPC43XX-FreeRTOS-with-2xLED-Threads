#ifdef __USE_CMSIS
#include "LPC43xx.h"
#endif
#include "lpc43xx_gpio.h"
#include "lpc43xx_scu.h"
#include "lpc43xx_libcfg_default.h"
#include "lpc43xx_cgu.h"
#include "lpc43xx_utils.h"

#include <cr_section_macros.h>
#include <NXP/crp.h>

// BK

#include "FreeRTOS/inc/FreeRTOS.h"
#include "FreeRTOS/inc/task.h"
//#include "FreeRTOS/inc/timers.h"
//#include "FreeRTOS/inc/semphr.h"


#include "LED.H"

__CRP const unsigned int CRP_WORD = CRP_NO_CRP ;

uint32_t msec;
uint32_t tempx, tempy;


int BK_TEST(void)
{
	// Needed
	SystemInit();
	CGU_Init();

	SetupLEDS();

	while (1)
	{                           					// Loop forever
		LED1();
		LED2();
	}
	return 0;
}

static void vLEDTask0(void *pvParameters) {
	while(1)
	{
		//GPIO_ClearValue(1,(1<<11));
		//vTaskDelay(configTICK_RATE_HZ/1);
		//GPIO_SetValue(1,(1<<11));
	}
}

static void vLEDTask1(void *pvParameters) {
	while(1)
	{
		GPIO_ClearValue(1,(1<<12));
		vTaskDelay(configTICK_RATE_HZ/2);
		GPIO_SetValue(1,(1<<12));
		vTaskDelay(configTICK_RATE_HZ/2);
	}
}




int main(void)
{
	// Needed
	SystemInit();
	CGU_Init();

	SetupLEDS();

	/* LED0 toggle thread */
    xTaskCreate(vLEDTask0, (signed char *) "vTaskLed0",
                            configMINIMAL_STACK_SIZE, NULL, (tskIDLE_PRIORITY + 1UL),
                            (xTaskHandle *) NULL);

    /* LED1 toggle thread */
    xTaskCreate(vLEDTask1, (signed char *) "vTaskLed1",
                            configMINIMAL_STACK_SIZE, NULL, (tskIDLE_PRIORITY + 1UL),
                            (xTaskHandle *) NULL);

	vTaskStartScheduler();

	return BK_TEST();
}

#ifdef  DEBUG
void check_failed(uint8_t *file, uint32_t line)
{
	while(1);
}
#endif


